##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.4.0-B60] date: [Tue Feb 25 00:09:06 HKT 2025]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = application


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

# Web Resources Path
WEB_RESOURCES_DIR = Libs/httpd/ex_fsdata.bin

######################################
# source
######################################
# 源文件目录
C_SOURCE_DIRS = \
Core/Src \
Drivers/STM32H7xx_HAL_Driver/Src \
Drivers/QSPI-W25Q64 \
Drivers/USART \
Drivers/LED \
Drivers/USB \
Drivers/ADC \
Drivers/PWM-WS2812B \
Drivers/GPIO-BTN \
Libs/tinyusb/src \
Libs/tinyusb/src/device \
Libs/tinyusb/src/common \
Libs/tinyusb/lib/networking \
Libs/tinyusb/src/portable/synopsys/dwc2 \
Libs/tinyusb/src/class/net \
Libs/tinyusb/src/class/hid \
Libs/rndis \
Libs/stm32_mw_lwip/src/apps \
Libs/stm32_mw_lwip/src/core \
Libs/stm32_mw_lwip/src/netif \
Libs/stm32_mw_lwip/src/core/ipv4 \
Libs/cJSON 
# Libs/tinyusb/src/host \


# C++ 源文件目录
CPP_SOURCE_DIRS = \
Cpp_Core/Src \
Cpp_Core/Src/drivers/net \
Cpp_Core/Src/drivers/xinput \
Cpp_Core/Src/drivers/switch \
Cpp_Core/Src/configs \
Cpp_Core/Src/gamepad \
Cpp_Core/Src/states \
Cpp_Core/Src/adc_btns \
Cpp_Core/Src/gpio_btns \
Cpp_Core/Src/leds \
Libs/CRC32/src \
Libs/httpd

# 自动查找源文件
C_SOURCES = $(foreach dir,$(C_SOURCE_DIRS),$(wildcard $(dir)/*.c))
CPP_SOURCES = $(foreach dir,$(CPP_SOURCE_DIRS),$(wildcard $(dir)/*.cpp))

# ASM sources
ASM_SOURCES =  \
startup_stm32h750xx.s

# 额外的源文件
C_SOURCES += \
Libs/stm32_mw_lwip/src/apps/http/httpd.c \
Libs/httpd/fs.c \
Libs/httpd/fsdata.c

# ASM sources
ASMM_SOURCES = 

# 基本头文件路径
C_INCLUDES = \
-ICore/Inc \
-IDrivers/STM32H7xx_HAL_Driver/Inc \
-IDrivers/STM32H7xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32H7xx/Include \
-IDrivers/CMSIS/Include \
$(CPP_INCLUDES)

# 添加 application 特定的包含路径
C_INCLUDES += \
-ICpp_Core/Inc \
-ICpp_Core/Inc/configs \
-ICpp_Core/Inc/drivers \
-ICpp_Core/Inc/gamepad \
-ICpp_Core/Inc/states \
-ICpp_Core/Inc/leds \
-ICpp_Core/Inc/enums \
-ICpp_Core/Inc/constants \
-IDrivers \
-IDrivers/QSPI-W25Q64 \
-IDrivers/USART \
-IDrivers/LED \
-IDrivers/USB \
-IDrivers/ADC \
-IDrivers/PWM-WS2812B \
-IDrivers/GPIO-BTN \
-ILibs/httpd \
-ILibs/tinyusb/hw \
-ILibs/tinyusb/src \
-ILibs/tinyusb/src/device \
-ILibs/tinyusb/src/common \
-ILibs/tinyusb/lib/networking \
-ILibs/tinyusb/src/portable/synopsys/dwc2 \
-ILibs/tinyusb/src/portable/st/stm32_fsdev \
-ILibs/tinyusb/src/class/net \
-ILibs/rndis \
-ILibs/stm32_mw_lwip/src/apps \
-ILibs/stm32_mw_lwip/src/core \
-ILibs/stm32_mw_lwip/src/netif \
-ILibs/stm32_mw_lwip/src/core/ipv4 \
-ILibs/stm32_mw_lwip/src/include \
-ILibs/stm32_mw_lwip/system \
-ILibs/lwip-port \
-ILibs/cJSON 
# -ILibs/tinyusb/src/host \


# C++ 编译器设置
CXX = $(PREFIX)g++
CXXFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT)
CXXFLAGS += -Wall -fdata-sections -ffunction-sections
CXXFLAGS += -fno-exceptions -fno-rtti  # 禁用异常和RTTI以减小代码大小
CXXFLAGS += -mfpu=fpv5-d16 -mfloat-abi=hard # 启用FPU
CXXFLAGS += -std=c++17  # 使用 C++17 标准

ifeq ($(DEBUG), 1)
CXXFLAGS += -g -gdwarf-2
endif

# 生成依赖信息
CXXFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m7

# fpu
FPU = -mfpu=fpv5-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32H750xx



# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += -mfpu=fpv5-d16 -mfloat-abi=hard # 启用FPU
CFLAGS += -u _printf_float   # 启用浮点数打印

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32H750XBHx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS += --specs=nosys.specs --specs=nano.specs -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# C++ 目标文件
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o)))
vpath %.S $(sort $(dir $(ASMM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR)
	$(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@
$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	@if not exist "$(BUILD_DIR)" mkdir "$(BUILD_DIR)"

#######################################
# clean up
#######################################
clean:
	@echo "Cleaning bootloader build files..."
	-if exist $(BUILD_DIR) rd /s /q $(BUILD_DIR)
	@echo "Clean complete"

#######################################
# flash
#######################################
  
flash: $(BUILD_DIR)/$(TARGET).hex
	openocd \
	-d0 \
	-f Openocd_Script/ST-LINK-QSPIFLASH.cfg \
	-c init \
	-c halt \
	-c "reset init" \
	-c "flash write_image erase $(BUILD_DIR)/$(TARGET).hex 0x00000000" \
	-c "flash verify_image $(BUILD_DIR)/$(TARGET).hex 0x00000000" \
	-c "reset run" \
	-c shutdown 

#######################################
# flash web resources
#######################################

flash-web-resources:
	openocd \
	-d0 \
	-f Openocd_Script/ST-LINK-QSPIFLASH.cfg \
	-c init \
	-c halt \
	-c "reset init" \
	-c "flash write_image erase $(WEB_RESOURCES_DIR) 0x90200000" \
	-c "flash verify_image $(WEB_RESOURCES_DIR) 0x90200000" \
	-c reset \
	-c shutdown 


# 添加调试目标，用于打印变量
debug:
	@echo "C++ sources: $(CPP_SOURCES)"
	@echo "Objects: $(OBJECTS)"

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***